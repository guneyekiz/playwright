name: Continuous Integration and Deployment

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Replace with the version of Node.js that matches your project requirements

      # Install npm dependencies and Playwright
      - name: Install dependencies and Playwright
        run: |
          npm ci
          npm install playwright

      # Install the browsers required by Playwright
      - name: Install Playwright browsers
        run: npx playwright install

      # Run Playwright tests and generate the HTML report
      - name: Run Playwright tests
        run: npx playwright test --reporter=html

      # Upload the Playwright HTML report as an artifact (optional step)
      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report

      # Deploy the Playwright report to GitHub Pages using a manual script
      - name: Deploy to GitHub Pages
        if: success() # This ensures deployment only if previous steps were successful
        run: |
          # Configure git
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # Fetch and checkout the gh-pages branch
          git fetch --depth=1 origin gh-pages
          git stash # Stash any changes
          git checkout gh-pages || git checkout -b gh-pages
          git rm -rf . # Remove all current files
          
          # Copy new report files from the artifact
          cp -R playwright-report/* .
          
          # Add and commit changes
          git add .
          git commit -m "Deploy Playwright report to GitHub Pages" --allow-empty
          
          # Push changes back to the remote gh-pages branch
          git push origin gh-pages --force
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
